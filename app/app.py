import streamlit as st
import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import classification_report, confusion_matrix, accuracy_score
import seaborn as sns
import matplotlib.pyplot as plt

# Carregamento dos dados
@st.cache_data
def load_data():
    return pd.read_csv("data/datatran2025.csv", encoding="ISO-8859-1", delimiter=';')

df = load_data()
st.title("üîç Classifica√ß√£o - Acidentes de Tr√¢nsito")

st.subheader("Pr√©via do Dataset")
st.dataframe(df.head())

# Sele√ß√£o de vari√°veis categ√≥ricas e num√©ricas
st.sidebar.header("Configura√ß√µes do Modelo")
target = st.sidebar.selectbox("Vari√°vel Alvo (classe Y)", df.select_dtypes(include="object").columns)

if target:
    feature_candidates = df.drop(columns=[target]).select_dtypes(include=[np.number]).columns
else:
    feature_candidates = df.select_dtypes(include=[np.number]).columns

features = st.sidebar.multiselect("Vari√°veis preditoras (X)", feature_candidates)

if len(features) == 0:
    st.warning("Selecione pelo menos uma vari√°vel preditora.")
    st.stop()

# Prepara√ß√£o dos dados
df = df.dropna(subset=features + [target])
X = df[features]
y = df[target]

# Divis√£o treino/teste
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Modelo
model = RandomForestClassifier(random_state=42)
model.fit(X_train, y_train)
y_pred = model.predict(X_test)

# Avalia√ß√£o
acc = accuracy_score(y_test, y_pred)
st.subheader("üéØ Desempenho do Modelo")
st.write(f"**Acur√°cia:** {acc:.2%}")

# Relat√≥rio de Classifica√ß√£o
st.subheader("üìã Relat√≥rio de Classifica√ß√£o")
report = classification_report(y_test, y_pred, output_dict=True)
st.dataframe(pd.DataFrame(report).transpose().style.format("{:.2f}"))

# Matriz de Confus√£o
st.subheader("üîª Matriz de Confus√£o")
cm = confusion_matrix(y_test, y_pred)
fig, ax = plt.subplots()
sns.heatmap(cm, annot=True, fmt="d", cmap="Blues", xticklabels=np.unique(y), yticklabels=np.unique(y))
ax.set_xlabel("Previsto")
ax.set_ylabel("Real")
st.pyplot(fig)
